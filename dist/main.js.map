{"version":3,"file":"main.js","mappings":"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","sources":["webpack://front/./src/js/Ticket.js","webpack://front/./src/js/fetch.js","webpack://front/./src/js/app.js","webpack://front/./src/js/controller.js"],"sourcesContent":["export default class TicketCard {\n  static createTicket(ticketInfo) {\n    const { id } = ticketInfo;\n    const { name } = ticketInfo;\n    const { status } = ticketInfo;\n    const date = ticketInfo.created;\n\n    const divJobIitem = document.createElement('li');\n    divJobIitem.classList.add('job-item');\n    divJobIitem.setAttribute('ticketId', id);\n\n    const divCompletionCircle = document.createElement('div');\n    divCompletionCircle.classList.add('completion-circle');\n    if (status) {\n      divCompletionCircle.classList.add('completed');\n    }\n    const divTaskName = document.createElement('div');\n    divTaskName.classList.add('task-name');\n    const h3TaskName = document.createElement('H3');\n    h3TaskName.classList.add('task-name');\n    h3TaskName.textContent = name;\n\n    divTaskName.appendChild(h3TaskName);\n\n    const divCreationTime = document.createElement('div');\n    divCreationTime.classList.add('creation-time');\n    divCreationTime.textContent = date;\n\n    const btnEdit = document.createElement('button');\n    btnEdit.classList.add('edit-btn');\n    const btnDelete = document.createElement('button');\n    btnDelete.classList.add('delete-btn');\n\n    divJobIitem.appendChild(divCompletionCircle);\n    divJobIitem.appendChild(divTaskName);\n    divJobIitem.appendChild(divCreationTime);\n    divJobIitem.appendChild(btnEdit);\n    divJobIitem.appendChild(btnDelete);\n\n    return divJobIitem;\n  }\n}\n","export default class Fetcher {\n  constructor() {\n    this.url = 'https://ahj-http-back.onrender.com/';\n    // this.url = 'http://localhost:3000/';\n  }\n\n  async getTicketsList() {\n    const request = fetch(`${this.url}?method=allTickets`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const result = await request;\n    return JSON.parse(await result.text());\n  }\n\n  async createTicket(body) {\n    const request = fetch(`${this.url}?method=createTicket`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body,\n    });\n\n    const result = await request;\n    const text = await result.text();\n    // console.log(text);\n  }\n\n  async deleteTicket(id) {\n    const request = fetch(`${this.url}?id=${id}`, {\n      method: 'delete',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const result = await request;\n    const text = await result.text();\n    // console.log(text);\n  }\n\n  async getDescription(id) {\n    const request = fetch(`${this.url}?method=ticketById&id=${id}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const result = await request;\n    const text = await result.text();\n    return JSON.parse(text);\n  }\n\n  async update(body) {\n    const request = fetch(`${this.url}?method=updateTicket`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body,\n    });\n\n    const result = await request;\n    const text = await result.text();\n    return text;\n  }\n}\n","import Controller from './controller';\n\nconst list = document.querySelector('.job-list');\n\nconst controllet = new Controller(list);\n\ncontrollet.init();\n","import TicketCard from \"./Ticket\";\r\nimport Fetcher from \"./fetch\";\r\n\r\nexport default class Controller {\r\n    constructor(list) {\r\n        this.list = list;\r\n        this.popup = null;\r\n        this.ul = list.querySelector('ul');\r\n        this.createTicket = this.createTicket.bind(this);\r\n        this.restart = this.restart.bind(this);\r\n        this.init = this.init.bind(this);\r\n        this.getCurrentDate = this.getCurrentDate.bind(this);\r\n        this.id = null;\r\n        this.ticketName = null;\r\n        this.description = null;\r\n        this.status = null;\r\n\r\n        this.fetcher = new Fetcher();\r\n\r\n    }\r\n\r\n    init() {\r\n        this.list.addEventListener('click', this.click);\r\n\r\n        this.restart();\r\n    }\r\n\r\n    async restart() {\r\n        this.ul.innerHTML = '';\r\n\r\n        const ticketList = await this.fetcher.getTicketsList();\r\n       \r\n        ticketList.forEach(element => {\r\n            this.ul.appendChild(TicketCard.createTicket(element));\r\n        });\r\n    }\r\n\r\n    async showElement(element) {\r\n        if (element.parentElement.querySelector('.task-description')) {\r\n            element.parentElement.querySelector('.task-description').remove();\r\n        } else {\r\n            const id = element.closest('.job-item').getAttribute('ticketID');\r\n            const description = await this.fetcher.getDescription(id);\r\n            const div = document.createElement('div');\r\n            div.classList.add('task-description');\r\n            const p = document.createElement('p');\r\n            p.textContent = description[0].description;\r\n            div.appendChild(p);\r\n            element.parentElement.appendChild(div);\r\n        }\r\n    }\r\n\r\n    click = async (event) => {\r\n        const target = event.target;\r\n\r\n        if (target.classList.contains('task-name')){\r\n            this.showElement(target);\r\n        } else if (target.classList.contains('completion-circle')) {\r\n           \r\n            if (target.classList.contains('completed')) {\r\n                this.status = false;\r\n            } else {\r\n                this.status = true;\r\n            }\r\n            target.classList.toggle('completed');\r\n\r\n            const id = target.parentElement.getAttribute('ticketId');\r\n            const description = await this.fetcher.getDescription(id);\r\n            \r\n            this.createTicket(\r\n                id, \r\n                target.parentElement.querySelector('.task-name').textContent, \r\n                description[0].description,\r\n                this.status\r\n            );\r\n\r\n\r\n\r\n        } else if (target.classList.contains('add-job-btn')) {\r\n            this.showPopup('add-ticket');\r\n        } else if (target.classList.contains('ok-button')) {\r\n            if (target.classList.contains('change-btn')){\r\n                this.createTicket(\r\n                    this.id, \r\n                    this.popup.querySelector('#name-field-').value, \r\n                    this.popup.querySelector('#description-field-').value\r\n                    );\r\n            } else {\r\n                this.createTicket();\r\n            }\r\n            \r\n        } else if (target.classList.contains('cancel-button')) {\r\n            this.showPopup('show');\r\n        } else if (target.classList.contains('delete-btn')) {\r\n            const id = target.parentElement.getAttribute('ticketId');\r\n            this.deleteTicket(id);\r\n        } else if (target.classList.contains('edit-btn')) {\r\n            this.showPopup('change-ticket');\r\n            this.showInfoForChange(target.closest('.job-item'))\r\n\r\n        }   \r\n    }\r\n\r\n    showPopup = (someClass) => {\r\n\r\n        this.popup = document.querySelector(`.${someClass}`)\r\n\r\n        this.popup.classList.toggle('show');\r\n        this.popup.classList.toggle('hidden');\r\n    }\r\n\r\n    async createTicket(id, name, description, status=false) {\r\n        if (id) {\r\n            const body = {\r\n                id: id,\r\n                name: name,\r\n                description: description,\r\n                status: status,\r\n                created: this.getCurrentDate()\r\n            }\r\n\r\n            this.fetcher.update(JSON.stringify(body));\r\n            location.reload();\r\n\r\n        } else {\r\n            const ticketName = this.popup.querySelector('#name-field').value;\r\n            const ticketDescription = this.popup.querySelector('#description-field').value;\r\n    \r\n            const body = JSON.stringify({\r\n                name: ticketName,\r\n                description: ticketDescription\r\n            })\r\n    \r\n            this.fetcher.createTicket(body);\r\n    \r\n            this.popup.querySelector('#name-field').value = '';\r\n            this.popup.querySelector('#description-field').value = '';\r\n            this.popup.classList.toggle('hidden');\r\n            this.popup.classList.toggle('show');\r\n            location.reload();\r\n        }\r\n\r\n    };\r\n\r\n    deleteTicket(id) {\r\n        this.fetcher.deleteTicket(id);\r\n        location.reload();\r\n    }\r\n\r\n    async showInfoForChange(element){\r\n        const name = element.querySelector('H3').textContent;\r\n        this.id = element.getAttribute('ticketId');\r\n        const description = await this.fetcher.getDescription(this.id);\r\n        this.popup.querySelector('#name-field-').value = name;\r\n        this.popup.querySelector('#description-field-').value = description[0].description; \r\n    }\r\n\r\n    getCurrentDate() {\r\n        const date = new Date();\r\n        const day = String(date.getDate()).padStart(2, '0');\r\n        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n        const year = date.getFullYear();\r\n    \r\n        return `${day}.${month}.${year}`;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"],"names":["TicketCard","createTicket","ticketInfo","id","name","status","date","created","divJobIitem","document","createElement","classList","add","setAttribute","divCompletionCircle","divTaskName","h3TaskName","textContent","appendChild","divCreationTime","btnEdit","btnDelete","Fetcher","constructor","this","url","getTicketsList","request","fetch","method","headers","result","JSON","parse","text","body","deleteTicket","getDescription","update","list","querySelector","controllet","popup","ul","bind","restart","init","getCurrentDate","ticketName","description","fetcher","addEventListener","click","innerHTML","forEach","element","showElement","parentElement","remove","closest","getAttribute","div","p","async","target","event","contains","toggle","showPopup","value","showInfoForChange","someClass","stringify","location","reload","ticketDescription","Date","String","getDate","padStart","getMonth","getFullYear"],"sourceRoot":""}